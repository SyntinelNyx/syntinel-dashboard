"use client";

import { useState } from "react";
import { Chip } from "@/components/Chip";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { apiFetch } from "@/lib/api-fetch";

interface VulnerabilityData {
  VulnerabilityName: string;
  VulnerabilityDescription: string;
  CvssScore: number;
  Reference: string[];
  CreatedOn: string;
  LastModified: string;
}

interface VulnerabilityCellProps {
  vulnID: string;
}

export function VulnerabilityCell({ vulnID }: VulnerabilityCellProps) {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [vulnData, setVulnData] = useState<VulnerabilityData>({
    VulnerabilityName: "",
    VulnerabilityDescription: "",
    CvssScore: 0,
    Reference: [],
    CreatedOn: "",
    LastModified: "",
  });

  const handleClick = async () => {
    if (loading) return;
    setLoading(true);

    try {
      const res = await apiFetch(`/vuln/retrieve-data`, {
        method: "POST",
        body: JSON.stringify({ vulnID }),
      });

      const json = await res.json();

      setVulnData({
        VulnerabilityName: json.vulnerabilityName,
        VulnerabilityDescription: json.vulnerabilityDescription,
        CvssScore: json.cvssScore,
        Reference: json.reference,
        CreatedOn: json.createdOn,
        LastModified: json.lastModified,
      });
      setOpen(true);
    } catch (error) {
      console.error("Failed to retrieve vulnerability data:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Chip
        label={vulnID}
        onClick={handleClick}
        className={`bg-slate-100 text-slate-800 hover:bg-slate-200 dark:bg-slate-700 dark:text-slate-200 dark:hover:bg-slate-600 px-3 py-1 font-semibold capitalize flex items-center gap-1 transition-all duration-150 ease-in-out cursor-pointer ${loading ? "opacity-50 pointer-events-none" : "hover:scale-105"
          }`}
      />

      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent className="max-w-lg mx-auto p-6 bg-white rounded-lg shadow-xl">
          <DialogHeader>
            <DialogTitle className="text-2xl font-semibold text-gray-800">Vulnerability Details</DialogTitle>
          </DialogHeader>

          <div className="space-y-6">
            <div className="text-1xl font-semibold text-gray-800">{vulnData.VulnerabilityName}</div>

            <p className="text-base text-gray-600">{vulnData.VulnerabilityDescription}</p>

            <div className="space-y-2">
              <div className="flex justify-between text-base text-gray-500">
                <div>
                  <strong>CVSS Score:</strong> {vulnData.CvssScore}
                </div>
              </div>

              <div className="flex justify-between text-base text-gray-500">
                <div>
                  <strong>Created On:</strong> {new Date(vulnData.CreatedOn).toLocaleDateString()}
                </div>
                <div>
                  <strong>Last Modified:</strong> {new Date(vulnData.LastModified).toLocaleDateString()}
                </div>
              </div>
            </div>

            {vulnData.Reference.length > 0 && (
              <a
                href={vulnData.Reference[0]}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-500 hover:underline mt-4 block"
              >
                View Reference
              </a>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}
