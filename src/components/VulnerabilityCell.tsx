"use client";

import { useState } from "react";
import { Chip } from "@/components/Chip";
import { Dialog, DialogContent, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ExternalLink } from "lucide-react";
import { apiFetch } from "@/lib/api-fetch";

interface VulnerabilityData {
  VulnerabilityName: string;
  VulnerabilityDescription: string;
  CvssScore: number;
  Reference: string[];
  CreatedOn: string;
  LastModified: string;
}

interface VulnerabilityCellProps {
  vulnID: string;
}

export function VulnerabilityCell({ vulnID }: VulnerabilityCellProps) {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [vulnData, setVulnData] = useState<VulnerabilityData>({
    VulnerabilityName: "",
    VulnerabilityDescription: "",
    CvssScore: 0,
    Reference: [],
    CreatedOn: "",
    LastModified: "",
  });

  const handleClick = async () => {
    if (loading) return;
    setLoading(true);

    try {
      const res = await apiFetch(`/vuln/retrieve-data`, {
        method: "POST",
        body: JSON.stringify({ vulnID }),
      });

      const json = await res.json();

      setVulnData({
        VulnerabilityName: json.vulnerabilityName,
        VulnerabilityDescription: json.vulnerabilityDescription,
        CvssScore: json.cvssScore,
        Reference: json.reference,
        CreatedOn: json.createdOn,
        LastModified: json.lastModified,
      });
      setOpen(true);
    } catch (error) {
      console.error("Failed to retrieve vulnerability data:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <Chip
        label={vulnID}
        onClick={handleClick}
        className={`bg-slate-100 text-slate-800 hover:bg-slate-200 dark:bg-slate-700 dark:text-slate-200 dark:hover:bg-slate-600 px-3 py-1 font-semibold capitalize flex items-center gap-1 transition-all duration-150 ease-in-out cursor-pointer ${loading ? "opacity-50 pointer-events-none" : "hover:scale-105"}`}
      />

      <Dialog open={open} onOpenChange={(isOpen) => {
        setOpen(isOpen);
      }}>
        <DialogContent className="max-w-lg mx-auto p-6 bg-white rounded-2xl shadow-md selectable">
          <DialogTitle className="text-2xl font-bold text-gray-800">
            Vulnerability Details
          </DialogTitle>

          <DialogDescription className="space-y-4">
            <div className="text-xl font-bold text-gray-800 mb-4">{vulnData.VulnerabilityName}</div>
            <div className="text-base text-gray-600 mb-6">{vulnData.VulnerabilityDescription}</div>

            <div className="space-y-2 text-gray-500">
              <div className="flex justify-between">
                <span className="font-medium">CVSS Score:</span>
                <span>{vulnData.CvssScore}</span>
              </div>
              <div className="flex justify-between">
                <span className="font-medium">Created On:</span>
                <span>{new Date(vulnData.CreatedOn).toLocaleDateString()}</span>
              </div>
              <div className="flex justify-between">
                <span className="font-medium">Last Modified:</span>
                <span>{new Date(vulnData.LastModified).toLocaleDateString()}</span>
              </div>
            </div>
          </DialogDescription>

          <DialogFooter className="flex justify-end gap-2">
            {vulnData.Reference.length > 0 && (
              <Button
                variant="outline"
                size="sm"
                className="flex items-center gap-2 mt-6 text-blue-600 font-semibold border-blue-500 hover:bg-blue-50 hover:text-blue-700 w-full"
                onClick={() => window.open(vulnData.Reference[0], "_blank", "noopener,noreferrer")}
              >
                View Reference
                <ExternalLink size={16} />
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
