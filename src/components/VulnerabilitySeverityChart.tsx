"use client";

import { useState, useEffect, useRef, useMemo } from "react";
import {
  AlertCircle,
  AlertTriangle,
  AlertOctagon,
  CheckCircle,
} from "lucide-react";
import { Pie, PieChart } from "recharts";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";
import { apiFetch } from "@/lib/api-fetch";
import { useToast } from "@/hooks/use-toast";

// Severity styles for consistent visual representation
const severityStyles: Record<
  string,
  {
    bg: string;
    text: string;
    icon?: React.ReactNode;
    iconColor?: string;
    animate?: string;
  }
> = {
  unknown: {
    bg: "bg-slate-100 dark:bg-slate-700",
    text: "text-slate-800 dark:text-slate-200",
  },
  low: {
    bg: "bg-green-400 dark:bg-green-700",
    text: "text-white",
    icon: <AlertCircle className="h-5 w-5" />,
    iconColor: "text-green-500",
  },
  medium: {
    bg: "bg-yellow-400 dark:bg-yellow-600",
    text: "text-white",
    icon: <AlertTriangle className="h-5 w-5" />,
    iconColor: "text-yellow-500",
  },
  high: {
    bg: "bg-orange-400 dark:bg-orange-700",
    text: "text-white",
    icon: <AlertOctagon className="h-5 w-5" />,
    iconColor: "text-orange-500",
  },
  critical: {
    bg: "bg-red-600 dark:bg-red-600",
    text: "text-white",
    icon: <AlertOctagon className="h-5 w-5" />,
    iconColor: "text-red-600",
    animate: "animate-custom-pulse",
  },
};

// Translate CSS class names to colors for recharts
const severityColors = {
  critical: "#dc2626", // red-600
  high: "#fb923c", // orange-400
  medium: "#facc15", // yellow-400
  low: "#4ade80", // green-400
  unknown: "#e2e8f0", // slate-100
};

type SeverityColors = {
  critical?: string;
  high?: string;
  medium?: string;
  low?: string;
  unknown?: string;
};

type Vulnerability = {
  severity: string;
};

interface VulnerabilitySeverityChartProps {
  trendingUp?: boolean;
  colors?: SeverityColors;
  data?: { severity: string; count: number }[];
}

export function VulnerabilitySeverityChart({
  trendingUp = false,
  colors = {},
  data = [],
}: VulnerabilitySeverityChartProps) {
  // Merge default colors with any custom colors provided
  const mergedColors = useMemo(
    () => ({ ...severityColors, ...colors }),
    [colors]
  );

  const { toast } = useToast();
  const hasFetched = useRef(false);
  const [vulns, setVulns] = useState<Vulnerability[]>([]);
  const [chartData, setChartData] = useState(
    data.map((item) => ({
      ...item,
      fill:
        mergedColors[item.severity as keyof SeverityColors] ||
        mergedColors.unknown,
    })),
  );

  useEffect(() => {
    if (hasFetched.current) {
      return;
    }
    hasFetched.current = true;

    async function fetchVulns() {
      try {
        const res = await apiFetch("/vuln/retrieve");
        const json = await res.json();

        setVulns(json);
      } catch (error) {
        const errorMessage =
          error instanceof Error
            ? error.message
            : "An Unknown Error Has Occurred";

        toast({
          variant: "destructive",
          title: "Vulnerability Fetch Failed",
          description: errorMessage,
        });
      }
    }

    fetchVulns();
  }, [toast]);

  useEffect(() => {
    if (vulns.length > 0) {
      // Count vulnerabilities by severity
      const severityCounts: Record<string, number> = {
        critical: 0,
        high: 0,
        medium: 0,
        low: 0,
        unknown: 0,
      };

      // Count vulnerabilities by their severity
      vulns.forEach((vuln) => {
        const severity = vuln.severity.toLowerCase();
        if (severity in severityCounts) {
          severityCounts[severity]++;
        } else {
          severityCounts.unknown++;
        }
      });

      // Transform counts into chart data format
      const newChartData = Object.entries(severityCounts)
      .filter(([, count]) => count > 0) // Only include non-zero counts
        .map(([severity, count]) => ({
          severity,
          count,
          fill:
            mergedColors[severity as keyof SeverityColors] ||
            mergedColors.unknown,
        }));

      setChartData(newChartData);
    }
  }, [vulns, mergedColors]);

  const chartConfig = {
    count: {
      label: "Vulnerabilities",
    },
    critical: {
      label: "Critical",
      color: mergedColors.critical,
    },
    high: {
      label: "High",
      color: mergedColors.high,
    },
    medium: {
      label: "Medium",
      color: mergedColors.medium,
    },
    low: {
      label: "Low",
      color: mergedColors.low,
    },
    unknown: {
      label: "Unknown",
      color: mergedColors.unknown,
    },
  } satisfies ChartConfig;

  const total = chartData.reduce((sum, item) => sum + item.count, 0);
  const criticalAndHigh = chartData
    .filter((item) => ["critical", "high"].includes(item.severity))
    .reduce((sum, item) => sum + item.count, 0);

  const percentCriticalAndHigh = ((criticalAndHigh / total) * 100).toFixed(1);

  if (total === 0) {
    return (
      <Card className="flex flex-col">
        <CardHeader className="items-center pb-0">
          <CardTitle>Vulnerability Severity Distribution</CardTitle>
          <CardDescription>Current assessment</CardDescription>
        </CardHeader>
        <CardContent className="flex flex-1 items-center justify-center">
          <div className="p-6 text-center">
            <div className="mx-auto mb-4 w-fit rounded-full bg-green-100 p-3 dark:bg-green-900/30">
              <CheckCircle className="h-8 w-8 text-green-500" />
            </div>
            <h3 className="mb-2 text-lg font-medium">
              No vulnerabilities found
            </h3>
            <p className="text-sm text-muted-foreground">
              Your system appears to be secure with no detected vulnerabilities.
            </p>
          </div>
        </CardContent>
      </Card>
    );
  }
  return (
    <Card className="flex flex-col">
      <CardHeader className="items-center pb-0">
        <CardTitle>Vulnerability Severity Distribution</CardTitle>
        <CardDescription>Current assessment</CardDescription>
      </CardHeader>
      <CardContent className="flex-1 pb-0">
        <ChartContainer
          config={chartConfig}
          className="mx-auto aspect-square max-h-[250px]"
        >
          <PieChart>
            <ChartTooltip
              cursor={false}
              content={<ChartTooltipContent hideLabel />}
            />
            <Pie
              data={chartData}
              dataKey="count"
              nameKey="severity"
              stroke="0"
            />
          </PieChart>
        </ChartContainer>
      </CardContent>
      <CardFooter className="flex-col gap-2 text-sm">
        <div className="leading-none text-muted-foreground">
          {criticalAndHigh} critical/high vulnerabilities (
          {percentCriticalAndHigh}% of total)
        </div>
        <div className="mt-2 flex flex-wrap justify-center gap-2">
          {Object.entries(severityStyles)
            .filter(([severity]) =>
              chartData.some((item) => item.severity === severity),
            )
            .map(([severity, style]) => (
              <div
                key={severity}
                className={`flex items-center gap-1 rounded-md px-2 py-1 ${style.bg} ${style.text} text-xs font-medium`}
              >
                {style.icon && (
                  <span className={style.iconColor}>{style.icon}</span>
                )}
                <span className="capitalize">{severity}</span>
              </div>
            ))}
        </div>
      </CardFooter>
    </Card>
  );
}
